---
import Layout from '@/layouts/Layout.astro';
import { Image } from 'astro:assets';
import Donations from '@/components/Donations.astro';
import { Markup } from 'astro-remote';
export async function getStaticPaths() {
	const countries = await import('@/data/countries.json');
	return countries.default.map((country: any) => {
		return {
			params: { slug: country.slug },
			props: { country },
		};
	});
}
const { country } = Astro.props;
---

<Layout title='Welcome to Astro.'>
	<div class='container py-20 lg:py-25'>
		<div class='md:max-w-[880px] mx-auto mb-20'>
			<div class='mb-8 md:mb-16'>
				<span class='section-caption'>{country.countryContent.caption}</span>
				<h1 class='text-xl md:text-2xl'>{country.title}</h1>
			</div>
			<div class='embla pb-12'>
				<div class='embla__viewport relative'>
					<div class='embla__container flex'>
						{
							country.countryContent.images.nodes.map(image => (
								<div class='embla__slide mb-4 h-[400px] md:h-[480px]'>
									<Image src={image.mediaItemUrl} inferSize alt='image' quality={90} class='size-full object-cover' />
								</div>
							))
						}
					</div>
					<div class='embla__progress-bar'>
						<div class='embla__progress-bar-fill'></div>
					</div>
				</div>
				<div class='embla-thumbs'>
					<div class='embla-thumbs__viewport overflow-hidden'>
						<div class='embla-thumbs__container flex gap-2'>
							{
								country.countryContent.images.nodes.map((image, index) => (
									<div class={`embla-thumbs__slide ${index === 0 && 'embla-thumbs__slide--selected'}`}>
										<button type='button' class='embla-thumbs__slide__number size-[100px]'>
											<Image src={image.mediaItemUrl} inferSize alt='image' class='size-full object-cover' />
										</button>
									</div>
								))
							}
						</div>
					</div>
				</div>
			</div>

			<article class='prose lg:prose-lg max-w-full mb-20 prose-figcaption:text-gray-2 prose-figcaption:text-sm prose-figcaption:text-center'>
				<Fragment set:html={country.countryContent.content} />
			</article>

			<section class='py-20 md:py-25 full-bleed bg-[#F8F8F8]'>
				<div class='flex flex-col md:flex-row items-start justify-between gap-10'>
					<div class='md:sticky md:top-30'>
						<h2 class='font-semibold md:font-medium normal-case text-[26px] leading-[31px] md:max-w-[301px]'>Our Goals for 2024</h2>
					</div>
					<ol class='flex flex-col pl-8 md:pl-0 gap-10 md:max-w-[465px] text-md'>
						<li>
							<strong>Plant 7 New Churches:</strong> We plan to establish 7 new churches in cities with populations exceeding 20,000 where there are currently no evangelical churches. Each church will
							receive an investment of $4000 to ensure a strong foundation and sustainable growth.
						</li>
						<li>
							<strong>Strengthen Community Outreach:</strong> We will enhance our community outreach programs, focusing on social services, education, and healthcare initiatives to support local communities
							and demonstrate the love of Christ in practical ways.
						</li>
						<li>
							<strong>Expand Leadership Training:</strong> Our goal is to train even more pastors and church leaders, equipping them with advanced theological education and practical ministry skills.
						</li>
					</ol>
				</div>
			</section>
		</div>

		<div class='max-w-[880px] mx-auto mb-20'>
			<span class='section-caption'>Get Involved Today</span>
			<h2 class='text-xl md:text-2xl mb-8'>Ready to Make a <br /> Difference in {country.title}?</h2>
			<p class='mb-6 text-md'>
				As a result of the continuous and invaluable support, CMI has been able to make a profound impact in Eastern Europe, sharing the message of Jesus and creating new churches.
			</p>
			<p class='mb-6 text-md'>You can help us continue this mission by donating to the CMI fund. Together, we can bring hope and community to even more towns in need.</p>
			<p class='text-black text-md'>“And let us consider how we may spur one another on toward love and good deeds” - Hebrews 10:24</p>
		</div>

		<Donations />
		<div class='py-20 border-y border-black'>
			<p class='mx-auto text-center max-w-[825px]'>
				Your contribution is invaluable to us. {country.title} is a rich field ready for harvest, and your help makes all the difference. Thank you for standing with us!
			</p>
		</div>
	</div>
</Layout>

<style>
	.embla {
		--slide-size: 100%;
	}

	.embla__container {
		backface-visibility: hidden;
		touch-action: pan-y pinch-zoom;
	}
	.embla__slide {
		flex: 0 0 var(--slide-size);
		min-width: 0;
	}
	.embla__slide__number {
		display: flex;
		align-items: center;
		justify-content: center;
		height: 100px;
		width: 100px;
		flex: 0 0 100px;
	}

	.embla-thumbs__viewport {
		overflow: hidden;
	}
	.embla-thumbs__container {
		display: flex;
	}
	.embla-thumbs__slide {
		flex: 0 0 100px;
		min-width: 0;
		padding-left: var(--thumbs-slide-spacing);
	}

	.embla__progress-bar {
		position: absolute;
		bottom: 14px;
		left: 0;
		width: 100%;
		height: 2px;
		background-color: #bcbcbc;
	}

	.embla__progress-bar-fill {
		width: 0;
		height: 100%;
		background-color: #1e1e1e;
	}

	ol > li {
		position: relative;
		counter-reset: list-item var(--fx-value);
	}
	ol > li:before {
		position: absolute;
		left: -50px;
		color: #9d9d9d;
		content: '0' counter(list-item) '.';
	}
	@media screen and (max-width: 650px) {
		ol > li:before {
			left: -35px;
		}
	}

	.full-bleed {
		box-shadow: 0 0 0 100vmax #f8f8f8;
		clip-path: inset(0 -100vmax);
	}

	table {
		width: 100%;
	}
	.table-wrapper {
		overflow: auto;
	}
</style>

<script>
	import EmblaCarousel, { type EmblaOptionsType } from 'embla-carousel';
	import Autoplay from 'embla-carousel-autoplay';
	import { addThumbBtnsClickHandlers, addToggleThumbBtnsActive } from '@/components/ui/embla/EmblaCarouselThumbsButton';

	const OPTIONS: EmblaOptionsType = {};
	const OPTIONS_THUMBS: EmblaOptionsType = {
		containScroll: 'keepSnaps',
		dragFree: true,
		loop: true,
	};

	const autoplayOptions = { delay: 5000, stopOnInteraction: false };
	const viewportNodeMainCarousel = document.querySelector('.embla__viewport') as HTMLElement;
	const viewportNodeThumbCarousel = document.querySelector('.embla-thumbs__viewport') as HTMLElement;
	const emblaApiMain = EmblaCarousel(viewportNodeMainCarousel, OPTIONS, [Autoplay(autoplayOptions)]);
	const emblaApiThumb = EmblaCarousel(viewportNodeThumbCarousel, OPTIONS_THUMBS);

	const progressBarFill = document.querySelector('.embla__progress-bar-fill') as HTMLElement;

	const updateProgressBar = () => {
		progressBarFill.style.transitionDuration = '0s';
		progressBarFill.style.width = '0%';
		setTimeout(() => {
			progressBarFill.style.transitionDuration = '5s';
			progressBarFill.style.width = '100%';
		}, 500);
	};

	emblaApiMain.on('select', updateProgressBar);
	emblaApiMain.on('init', updateProgressBar);

	const removeThumbBtnsClickHandlers = addThumbBtnsClickHandlers(emblaApiMain, emblaApiThumb);
	const removeToggleThumbBtnsActive = addToggleThumbBtnsActive(emblaApiMain, emblaApiThumb);

	emblaApiMain.on('destroy', removeThumbBtnsClickHandlers).on('destroy', removeToggleThumbBtnsActive);
	emblaApiThumb.on('destroy', removeThumbBtnsClickHandlers).on('destroy', removeToggleThumbBtnsActive);

	const handlePointerDown = () => {
		emblaApiMain.plugins().autoplay?.stop();
	};

	const handlePointerUp = () => {
		emblaApiMain.plugins().autoplay?.play();
	};

	const slidesThumbs = emblaApiThumb.slideNodes();
	slidesThumbs.forEach(slideNode => {
		slideNode.addEventListener('pointerdown', handlePointerDown, false);
		slideNode.addEventListener('pointerup', handlePointerUp, false);
	});

	emblaApiMain.on('destroy', () => {
		slidesThumbs.forEach(slideNode => {
			slideNode.removeEventListener('pointerdown', handlePointerDown, false);
			slideNode.removeEventListener('pointerup', handlePointerUp, false);
		});
	});

	const tables = document.querySelectorAll('table');

	console.log(tables)

	if (tables.length > 0) {
		tables.forEach(table => {
			const div = document.createElement('div');
			div.className = 'overflow-auto';
			table.parentNode.insertBefore(div, table);
			div.appendChild(table);
		});
	}
</script>
